nyears, "_wordcloud.pdf"))
pdf(pdfname, width=10, height=10)
wordcloud(words = wtab$affil,
freq = wtab$nall, random.order=FALSE)
title(main=paste0("Frequency of Affiliations for years",
ryear[1], " to ", ryear[2]))
dev.off()
cloud = function(wtab, year){
wordcloud(words = wtab$affil,
freq = wtab$nall, random.order=FALSE)
title(main=paste0("Frequency of Affiliations for Year: ",
year))
}
pdfname = file.path(homedir,
paste0("Affiliation_Each_Year_wordcloud.pdf"))
pdf(pdfname, width=10, height=10)
wtabs = dlply(data, .(year), dftab,
min.n=1, change.u=TRUE)
mapply(cloud, wtabs, names(wtabs))
wtabs = dlply(data, .(year), dftab,
min.n=1, change.u=FALSE)
mapply(cloud, wtabs, names(wtabs))
dev.off()
#######################
# Abstracts
####################
abs = removePunctuation(data$abstract)
abs = stripWhitespace(abs)
ss = strsplit(abs, " ")
word.abs = unlist(ss)
word.abs = gsub("áøs", "", word.abs)
word.abs = gsub("ò", "", word.abs)
word.abs = gsub("õs", "", word.abs)
word.abs = gsub("õ", "", word.abs)
word.abs = gsub("á", "", word.abs)
word.abs = gsub("ð", "-", word.abs)
word.abs = gsub("ó", "", word.abs)
word.abs = gsub("µ", "micro ", word.abs)
word.abs = gsub("ø", "", word.abs)
word.abs = gsub("ô", "", word.abs)
word.abs = gsub("ê", "", word.abs)
word.abs = gsub("ß", "fl", word.abs)
tab = abs.tab(word.abs, min.n=2)
dim(tab)
head(tab)
stopwords("english")
#######################
# Abstracts
####################
abs = removePunctuation(data$abstract)
abs = stripWhitespace(abs)
ss = strsplit(abs, " ")
word.abs = unlist(ss)
word.abs = gsub("áøs", "", word.abs)
word.abs = gsub("ò", "", word.abs)
word.abs = gsub("õs", "", word.abs)
word.abs = gsub("õ", "", word.abs)
word.abs = gsub("á", "", word.abs)
word.abs = gsub("ð", "-", word.abs)
word.abs = gsub("ó", "", word.abs)
word.abs = gsub("µ", "micro ", word.abs)
word.abs = gsub("ø", "", word.abs)
word.abs = gsub("ô", "", word.abs)
word.abs = gsub("ê", "", word.abs)
word.abs = gsub("ß", "fl", word.abs)
word.abs = removeWords(word.abs,
words=stopwords("english"))
#### replacing stuff
tab = abs.tab(word.abs, min.n=2)
head(tab)
install.packages("wordnet")
library(wordnet)
?getLemma
filter <- getTermFilter("StartsWithFilter", "car", TRUE)
initDict()
Sys.getenv("WMHOME")
?Sys.setenv()
rm(list=ls())
library(tm)
library(stringr)
library(zoo)
library(plyr)
library(wordcloud)
library(reshape2)
library(tools)
library(ggplot2)
library(wordnet)
wmhome= Sys.getenv("WMHOME")
if (wmhome == "") {
Sys.setenv(WMHOME="/opt/local/bin")
}
homedir = "~/Dropbox/database"
homedir = path.expand(homedir)
options(stringsAsFactors=FALSE)
rm(list=ls())
library(tm)
library(stringr)
library(zoo)
library(plyr)
library(wordcloud)
library(reshape2)
library(tools)
library(ggplot2)
wmhome= Sys.getenv("WMHOME")
if (wmhome == "") {
Sys.setenv(WMHOME="/opt/local/bin")
}
library(wordnet)
homedir = "~/Dropbox/database"
homedir = path.expand(homedir)
options(stringsAsFactors=FALSE)
initDict()
rm(list=ls())
library(tm)
library(stringr)
library(zoo)
library(plyr)
library(wordcloud)
library(reshape2)
library(tools)
library(ggplot2)
wmhome= Sys.getenv("WNHOME")
if (wmhome == "") {
Sys.setenv(WNHOME="/opt/local/bin")
}
library(wordnet)
initDict()
source('~/Dropbox/database/Plot_Data.R')
word.abs
abs = removePunctuation(data$abstract)
abs = stripWhitespace(abs)
ss = strsplit(abs, " ")
word.abs = unlist(ss)
word.abs
word.abs = gsub("áøs", "", word.abs)
word.abs = gsub("ò", "", word.abs)
word.abs = gsub("õs", "", word.abs)
word.abs = gsub("õ", "", word.abs)
word.abs = gsub("á", "", word.abs)
word.abs = gsub("ð", "-", word.abs)
word.abs = gsub("ó", "", word.abs)
word.abs = gsub("µ", "micro ", word.abs)
word.abs = gsub("ø", "", word.abs)
word.abs = gsub("ô", "", word.abs)
word.abs = gsub("ê", "", word.abs)
word.abs = gsub("ß", "fl", word.abs)
abs = removePunctuation(data$abstract)
abs = stripWhitespace(abs)
ss = strsplit(abs, " ")
word.abs = unlist(ss)
word.abs = gsub("áøs", "", word.abs)
word.abs = gsub("ò", "", word.abs)
word.abs = gsub("õs", "", word.abs)
word.abs = gsub("õ", "", word.abs)
word.abs = gsub("á", "", word.abs)
word.abs = gsub("ð", "-", word.abs)
word.abs = gsub("ó", "", word.abs)
word.abs = gsub("µ", "micro ", word.abs)
word.abs = gsub("ø", "", word.abs)
word.abs = gsub("ô", "", word.abs)
word.abs = gsub("ê", "", word.abs)
word.abs = gsub("ß", "fl", word.abs)
word.abs = removeWords(word.abs,
words=stopwords("english"))
word.abs = word.abs[ word.abs != ""]
#### replacing stuff
tab = abs.tab(word.abs, min.n=2)
x =showNonASCII(names(tab))
# df = data.frame(old=x, stringsAsFactors=FALSE)
# df$new = df$old
filter <- getTermFilter("StartsWithFilter", "car", TRUE)
terms <- getIndexTerms("NOUN", 5, filter)
sapply(terms, getLemma)
initDict()
library(tm)
?removeWords
removeWords
tm:::removeWords.character
library(devtools)
install_github("swirldev/swirl")
library(swirl)
swirl()
cars
cars$mpgCity
myMPG = cars$mpgCity
mean(myMPG)
median(myMPG)
back()
table(myMPG)
mode(myMPG)
19
swirl()
range(cars$price)
price
diff(range(cars$price))
var(cars$price)
sd(cars$price)
16
no
10
25
?swirl
swirl()
4
summary(cars$price)
10
25
4
summary(cars$price)
swirl()
swirl()
5+7
x <- 5+7
x
x - 3
y= x-3
y<-x-3
y
c(1.1, 9, 3.14)
z = c(1.1, 9, 3.14)
z <- c(1.1, 9, 3.14)
?c
z
c(z, 555, z)
z *2 + 100
sqrt(z-1)
mySqrt = sqrt(z-1)
mySqrt <- sqrt(z-1)
mySqrt
myDiv <- z / mySqrt
myDiv
c(1, 2, 3, 4) + c(0, 10)
c(1, 2, 3, 4) + c(0, 10, 100)
swirl()
∫
"∫α + β"
"∫α + β"
?expr_creates_var
swirl:::expr_creates_var
swirl:::var_is_a
swirl:::var_is_a
swirl:::expr_creates_var
swirl:::expr_uses_func
swirl:::val_has_length
swirl:::expr_is_a
library(ggplot2)
library(reshape2)
library(plyr)
library(xtable)
library(data.table)
?ggplot2
?geom_hist
?geom_histogram
?data.table
?melt
names(airquality) <- tolower(names(airquality))
melt(airquality, id=c("month", "day"))
names(airquality) <- tolower(names(airquality))
melted = melt(airquality, id=c("month", "day"))
## plyr example
means = ddply(melted, .(variable), summarise,
mean.val = mean(value, na.rm=TRUE))
means
library(ggplot2)
?scale_color_brewer
?scale_color_continuous
df = data.frame(x = rnorm(100), y=rnorm(100), z= seq(-60, 40))
df = data.frame(x = rnorm(100), y=rnorm(100), z= seq(-60, 39))
g = ggplot(df, aes(x=x, y=y, colour=z)) + geom_point()
g
g+ scale_color_continuous(low="blue", high='red')
?scale_color_continuous
g+ scale_color_gradient(low="blue", high='red')
g+ scale_color_gradient2(low="blue", high='red')
?scale_color_gradient2(low="blue", high='red')
?scale_color_gradient2
?hotmetal
library(oro.dicom)
?hotmetal
library(oro.nift)
library(oro.nifti)
?hotmetal
scale_color_gradient2
continuous_scale
structure
?structure
x = c("the dog", "basdf asdf", ' asdf asd asd ')
x = strsplit(x, " ")
x
sapply(x, "[", 1)
str(x)
str(x,1)
?str
library(googleCite)
x = searchCite("Jonathan Taylor")
x = searchCite("B efron")
head(x)
x$"Journal name"
cn = colnames(x)
cn = gsub(" ", "_", cn)
colnames(x) = cn
headD(x)
head(x)
slide <- function(fname) {
require(slidify)
require(knitr)
slidify(fname)
fname <- gsub(".Rmd", ".html", fname)
system(sprintf('open %s', fname))
}
rm(list=ls())
library(rgl)
library(brainR)
library(misc3d)
library(oro.dicom)
library(oro.nifti)
library(AnalyzeFMRI)
library(knitcitations)
library(slidify)
library(dti)
library(plotrix)
rootdir <- "~/Dropbox/3DPDF_Example"
rootdir = path.expand(rootdir)
outdir <- file.path(rootdir, "Presentation")
homedir <- file.path(rootdir, "Paper")
datadir <- file.path(homedir, "data")
progdir <- file.path(homedir, "programs")
resdir <- file.path(homedir, "results")
install.packages("dti")
install.packages("dti")
library(rgl)
?movie3d
library(animation)
?saveHTML
library(misc3d)
help(package="misc3d")
help(package="rgl")
library(brainR)
?write4d
?write4D
#Brain Template from Copyright (C) 1993-2009 Louis Collins,
#McConnell Brain Imaging Centre,
#Montreal Neurological Institute, McGill University
#6th generation non-linear symmetric brain
##Downsampled to 8mm using FSL fslmaths -subsamp2
template <- readNIfTI(system.file("MNI152_T1_8mm_brain.nii.gz", package="brainR")
, reorient=FALSE)
dtemp <- dim(template)
### 4500 - value that empirically value that presented a brain with gyri
### lower values result in a smoother surface
brain <- contour3d(template, x=1:dtemp[1], y=1:dtemp[2],
z=1:dtemp[3], level = 4500, alpha = 0.8, draw = FALSE)
### Example data courtesy of Daniel Reich
### Each visit is a binary mask of lesions in the brain
imgs <- paste("Visit_", 1:5, "_8mm.nii.gz", sep="")
files <- sapply(imgs, system.file, package='brainR')
scene <- list(brain)
## loop through images and thresh
nimgs <- length(imgs)
cols <- rainbow(nimgs)
for (iimg in 1:nimgs) {
mask <- readNIfTI(files[iimg], reorient=FALSE)
if (length(dim(mask)) > 3) mask <- mask[,,,1]
### use 0.99 for level of mask - binary
activation <- contour3d(mask, level = c(0.99), alpha = 1,
add = TRUE, color=cols[iimg], draw=FALSE)
## add these triangles to the list
scene <- c(scene, list(activation))
}
## make output image names from image names
fnames <- c("brain.stl", gsub(".nii.gz", ".stl", imgs, fixed=TRUE))
outfile <-  file.path(tempdir(), "index_4D_stl.html")
write4D(scene=scene, fnames=fnames, outfile=outfile,
standalone=TRUE, rescale=TRUE, toggle="slider")
# browseURL(outfile)
browseURL(outfile)
install.packages("devtools")
library(devtools)
install_github("IRanges",user="hcorrada")
install_github("GenomicIntervalTree",user="hcorrada",subdir="pkg")
install_github("epivizr", user="hcorrada", subdir="pkg")
source("http://bioconductor.org/biocLite.R")
biocLite("GenomicRanges")
install.packages("devtools")
library(devtools)
install_github("IRanges",user="hcorrada")
install_github("GenomicIntervalTree",user="hcorrada",subdir="pkg")
install_github("epivizr", user="hcorrada", subdir="pkg")
install_github("epivizr", user="hcorrada")
install_github("epivizr", user="epivis")
install_github("epivizr", user="epiviz")
install_github("epivizr", user="epiviz")
install.packages("~/Downloads/epivizr-master.tar.gz", repos = NULL, type = "source")
library(epivizr)
load(system.file("extdata/tcga_colon.rda", PACKAGE="epivizr"))
library(epivizr)
load(system.file("data/tcga_colon.rda", PACKAGE="epivizr"))
library(epivizr)
load(system.file("data/tcga_colon_example.rda", PACKAGE="epivizr"))
system.file("data/tcga_colon_example.rda", PACKAGE="epivizr")
library(epivizr)
system.file("data/tcga_colon_example.rda", package="epivizr")
system.file("data/tcga_colon_example.rda", package="epivizr")
library(epivizr)
load(system.file("data/tcga_colon_example.rda", package="epivizr"))
mgr=startEpiviz(openBrowser=TRUE)
grId=mgr$addDevice(colonGR, "colon_blocks")
#need to interrupt (e.g. ESC or Ctrl-C) before continuing on
diffStat=GRanges(seqnames=as.character(colon_dat$chrom),
ranges=IRanges(start=colon_dat$maploc, width=1))
diffStat$stat=colon_dat$Sample.1
diffStat$smooth=runmed(colon_dat$Sample.1,9)
mgr$addDevice(diffStat,"diff_stat",type="bp",mdCols="smooth")
# this call allows the R session to listen to requests from Epiviz
mgr$service()
load(system.file("data/tcga_colon_example.rda", package="epivizr"))
x
x = load(system.file("data/tcga_colon_example.rda", package="epivizr"))
x
mgr=startEpiviz(openBrowser=TRUE)
grId=mgr$addDevice(colonGR, "colon_blocks")
mrg
mgr
?startEpiviz
mgr$stopServer()
mgr=startEpiviz(openBrowser=TRUE)
grId=mgr$addDevice(colonGR, "colon_blocks")
load(system.file("data/tcga_colon_example.rda", package="epivizr"))
x = load(system.file("data/tcga_colon_example.rda", package="epivizr"))
y= load(system.file("data/tcga_colon_expression.rda", package="epivizr"))
x
y
require(epivizr)
require(antiProfilesData)
source("http://bioconductor.org/biocLite.R")
biocLite("antiProfilesData")
require(epivizr)
require(antiProfilesData)
data(tcga_colon_example)
data(apColonData)
show(colon_blocks)
plot(colon_blocks$value, -log10(colon_blocks$p.value), main="Volcano plot", xlab="Avg. methylation difference", ylab="-log10 p-value",xlim=c(-.5,.5))
show(colon_curves)
mgr=startEpiviz(workspace="C60FA3168F34DBC763F579C1EADA8AF0")
mgr$stopServer()
mgr=startEpiviz(workspace="C60FA3168F34DBC763F579C1EADA8AF0")
mgr$startServer()
blocks_dev <- mgr$addDevice(colon_blocks, "450k colon_blocks")
mgr$service()
keep <- width(colon_blocks) > 250000
mgr$updateDevice(blocks_dev, colon_blocks[keep,])
means_dev <- mgr$addDevice(colon_curves, "450kMeth",type="bp",columns=c("cancerMean","normalMean"))
diff_dev <- mgr$addDevice(colon_curves,"450kMethDiff",type="bp",columns=c("smooth"),ylim=matrix(c(-.5,.5),nc=1))
mgr$listDevices()
mgr$rmDevice(means_dev)
mgr$listDevices()
keep <- pData(apColonData)$SubType!="adenoma"
apColonData <- apColonData[,keep]
status <- pData(apColonData)$Status
Indexes <- split(seq(along=status),status)
exprMat <- exprs(apColonData)
mns <- sapply(Indexes, function(ind) rowMeans(exprMat[,ind]))
mat <- cbind(colonM=mns[,"1"]-mns[,"0"], colonA=0.5*(mns[,"1"]+mns[,"0"]))
assayDataElement(apColonData, "MA") <- mat
show(apColonData)
eset_dev <- mgr$addDevice(apColonData, "MAPlot", columns=c("colonA","colonM"), assay="MA")
biocLite("hgu133plus2.db")
eset_dev <- mgr$addDevice(apColonData, "MAPlot", columns=c("colonA","colonM"), assay="MA")
data(tcga_colon_expression)
show(colonSE)
ref_sample <- 2 ^ rowMeans(log2(assay(colonSE) + 1))
scaled <- (assay(colonSE) + 1) / ref_sample
scaleFactor <- Biobase::rowMedians(t(scaled))
assay_normalized <- sweep(assay(colonSE), 2, scaleFactor, "/")
assay(colonSE) <- assay_normalized
status <- colData(colonSE)$sample_type
index <- split(seq(along = status), status)
logCounts <- log2(assay(colonSE) + 1)
means <- sapply(index, function(ind) rowMeans(logCounts[, ind]))
mat <- cbind(cancer = means[, "Primary Tumor"], normal = means[, "Solid Tissue Normal"])
sumexp <- SummarizedExperiment(mat, rowData=rowData(colonSE))
se_dev <- mgr$addDevice(sumexp, "Mean by Sample Type", columns=c("normal", "cancer"))
mgr$navigate("chr11", 110000000, 120000000)
foldChange=mat[,"cancer"]-mat[,"normal"]
ind=order(foldChange,decreasing=TRUE)
# bounding 1Mb around each exon
slideshowRegions <- rowData(sumexp)[ind] + 1000000L
mgr$slideshow(slideshowRegions, n=5)
mgr$stopServer()
biocLite("epivizr")
system.file("data/tcga_colon_example.rda", package="epivizr")
system.file("data/tcga_colon_example.rda", package="epivizr")
system.file("blah", package="epivizr")
x = system.file("blah", package="epivizr")
x
dev.off()
dev.off()
x = system.file("blah", package="epivizr")
x
q('no')
library(epivizr)
system.file("data/tcga_colon_example.rda", package="epivizr")
system('open /Users/johnmuschelli/Library/R/3.0/library/epivizr')
slide <- function(fname) {
require(slidify)
require(knitr)
slidify(fname)
fname <- gsub(".Rmd", ".html", fname)
system(sprintf('open %s', fname))
}
setwd("~/Dropbox/Computing_Club/Two_Modeling_Cultures/")
slide("index.Rmd")
